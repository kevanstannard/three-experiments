/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/experiments/geometry-uvs/index.js":
/*!***********************************************!*\
  !*** ./src/experiments/geometry-uvs/index.js ***!
  \***********************************************/
/***/ (() => {

eval("var SCREEN_WIDTH = window.innerWidth;\nvar SCREEN_HEIGHT = window.innerHeight;\nvar VIEW_ANGLE = 45;\nvar ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT;\nvar NEAR = 1;\nvar FAR = 10000;\nvar scene;\nvar camera;\nvar renderer;\nvar axisHelper;\nvar gridHelper;\nvar controls;\nvar ambientLight;\nvar plane;\nvar origin = new THREE.Vector3(0, 0, 0);\nvar textures = {};\nfunction loadTexture(id, url) {\n    return new Promise(function(resolve) {\n        var loader = new THREE.TextureLoader();\n        loader.load(url, function(texture) {\n            textures[id] = texture;\n            resolve();\n        });\n    });\n}\nfunction load() {\n    var promises = [];\n    promises.push(loadTexture(\"free\", \"../../assets/textures/misc/free.jpg\"));\n    return Promise.all(promises);\n}\nfunction UVSizeAnimation(geometry) {\n    this.geometry = geometry;\n    this.original = geometry.clone();\n    this.deltaMin = 0.5;\n    this.deltaMax = 1;\n    this.delta = this.deltaMax;\n    this.speed = 0.005;\n    this.direction = -1;\n}\nUVSizeAnimation.prototype = {\n    updateDelta: function updateDelta() {\n        var newDelta = this.delta + this.speed * this.direction;\n        if (newDelta < this.deltaMin) {\n            newDelta = this.deltaMin;\n            this.direction = 1;\n        } else if (newDelta > this.deltaMax) {\n            newDelta = this.deltaMax;\n            this.direction = -1;\n        }\n        this.delta = newDelta;\n    },\n    update: function update() {\n        this.updateDelta();\n        var triangles = this.original.faceVertexUvs[0];\n        for(var i = 0; i < triangles.length; i += 1){\n            var tri = this.geometry.faceVertexUvs[0][i];\n            var orig = this.original.faceVertexUvs[0][i];\n            for(var j = 0; j < tri.length; j += 1){\n                tri[j].x = orig[j].x * this.delta;\n                tri[j].y = orig[j].y * this.delta;\n            }\n        }\n        this.geometry.uvsNeedUpdate = true;\n    }\n};\nfunction AnimatedPlaneGeometry(size) {\n    THREE.PlaneGeometry.call(this, size, size, 1);\n    this.animation = new UVSizeAnimation(this);\n}\nAnimatedPlaneGeometry.prototype = Object.assign(Object.create(THREE.PlaneGeometry.prototype), {\n    constructor: AnimatedPlaneGeometry,\n    update: function update() {\n        this.animation.update();\n    }\n});\nfunction AnimatedPlane() {\n    this.geometry = new AnimatedPlaneGeometry(100);\n    this.material = new THREE.MeshBasicMaterial({\n        side: THREE.DoubleSide,\n        map: textures.free\n    });\n    THREE.Mesh.call(this, this.geometry, this.material);\n}\nAnimatedPlane.prototype = Object.assign(Object.create(THREE.Mesh.prototype), {\n    constructor: AnimatedPlane,\n    update: function update() {\n        this.geometry.update();\n    }\n});\nfunction init() {\n    camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);\n    camera.position.set(100, 120, 140);\n    camera.lookAt(origin);\n    scene = new THREE.Scene();\n    gridHelper = new THREE.GridHelper(100, 10);\n    scene.add(gridHelper);\n    axisHelper = new THREE.AxisHelper(100);\n    scene.add(axisHelper);\n    plane = new AnimatedPlane();\n    scene.add(plane);\n    // console.log(plane.geometry);\n    // console.log(geometry);\n    // console.log(JSON.stringify(geometry.faceVertexUvs, null, 2));\n    // geometry.vertices\n    //\n    // [\n    //   {\n    //     \"x\": -50,\n    //     \"y\": 50,\n    //     \"z\": 0\n    //   },\n    //   {\n    //     \"x\": 50,\n    //     \"y\": 50,\n    //     \"z\": 0\n    //   },\n    //   {\n    //     \"x\": -50,\n    //     \"y\": -50,\n    //     \"z\": 0\n    //   },\n    //   {\n    //     \"x\": 50,\n    //     \"y\": -50,\n    //     \"z\": 0\n    //   }\n    // ]\n    // geometry.faceVertexUvs\n    //\n    // [\n    //   [\n    //     [\n    //       {\n    //         \"x\": 0,\n    //         \"y\": 1\n    //       },\n    //       {\n    //         \"x\": 0,\n    //         \"y\": 0\n    //       },\n    //       {\n    //         \"x\": 1,\n    //         \"y\": 1\n    //       }\n    //     ],\n    //     [\n    //       {\n    //         \"x\": 0,\n    //         \"y\": 0\n    //       },\n    //       {\n    //         \"x\": 1,\n    //         \"y\": 0\n    //       },\n    //       {\n    //         \"x\": 1,\n    //         \"y\": 1\n    //       }\n    //     ]\n    //   ]\n    // ]\n    // geometry.faces\n    // [\n    //   {\n    //     \"a\": 0,\n    //     \"b\": 2,\n    //     \"c\": 1,\n    //     \"normal\": {\n    //       \"x\": 0,\n    //       \"y\": 0,\n    //       \"z\": 1\n    //     },\n    //     \"vertexNormals\": [\n    //       {\n    //         \"x\": 0,\n    //         \"y\": 0,\n    //         \"z\": 1\n    //       },\n    //       {\n    //         \"x\": 0,\n    //         \"y\": 0,\n    //         \"z\": 1\n    //       },\n    //       {\n    //         \"x\": 0,\n    //         \"y\": 0,\n    //         \"z\": 1\n    //       }\n    //     ],\n    //     \"color\": 16777215,\n    //     \"vertexColors\": [],\n    //     \"materialIndex\": 0\n    //   },\n    //   {\n    //     \"a\": 2,\n    //     \"b\": 3,\n    //     \"c\": 1,\n    //     \"normal\": {\n    //       \"x\": 0,\n    //       \"y\": 0,\n    //       \"z\": 1\n    //     },\n    //     \"vertexNormals\": [\n    //       {\n    //         \"x\": 0,\n    //         \"y\": 0,\n    //         \"z\": 1\n    //       },\n    //       {\n    //         \"x\": 0,\n    //         \"y\": 0,\n    //         \"z\": 1\n    //       },\n    //       {\n    //         \"x\": 0,\n    //         \"y\": 0,\n    //         \"z\": 1\n    //       }\n    //     ],\n    //     \"color\": 16777215,\n    //     \"vertexColors\": [],\n    //     \"materialIndex\": 0\n    //   }\n    // ]\n    ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    renderer = new THREE.WebGLRenderer({\n        antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    controls = new THREE.OrbitControls(camera, renderer.domElement);\n    THREEx.WindowResize(renderer, camera);\n    document.body.appendChild(renderer.domElement);\n}\nfunction update() {\n    plane.update();\n    controls.update();\n}\nfunction animate() {\n    requestAnimationFrame(animate);\n    update();\n    renderer.render(scene, camera);\n}\nload().then(function() {\n    init();\n    animate();\n});\n\n\n//# sourceURL=webpack://three-experiments/./src/experiments/geometry-uvs/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/experiments/geometry-uvs/index.js"]();
/******/ 	
/******/ })()
;